div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name:")
id = as.integer(readline(prompt = "Your ID:"))
mark1 = as.integer(readline(prompt = "Your mark1:"))
mark2 = as.integer(readline(prompt = "Your mark2:"))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name:")
id = as.integer(readline(prompt = "Your ID:"))
mark1 = as.integer(readline(prompt = "Your mark1:"))
mark2 = as.integer(readline(prompt = "Your mark2:"))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details()
clear
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name: ")
id = as.integer(readline(prompt = "Your ID: "))
mark1 = as.integer(readline(prompt = "Your mark1: "))
mark2 = as.integer(readline(prompt = "Your mark2: "))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details()
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name: ")
id = as.integer(readline(prompt = "Your ID: "))
mark1 = as.integer(readline(prompt = "Your mark1: "))
mark2 = as.integer(readline(prompt = "Your mark2: "))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
take(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
view(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
sample_data
View(sample_data)
#---- Analysis 2.3 - Analyze the correlation among employees' generations, employees' gender and layoffs----
Q2_3 = function() {
# summarize the data and store it in a new object
laid_off_summary <- data %>%
filter(termination_reason == "Layoff") %>%
group_by(generation, gender) %>%
summarize(num_laid_off = n(), .groups = 'drop')
# plot stacked bar chart using the summarized data
ggplot(laid_off_summary, aes(x=generation, y=num_laid_off, fill=gender)) +
geom_bar(stat = "identity", position="stack") +
labs(x="Age Generation",
y="Number of Laid Off Employees",
fill="Gender") +
ggtitle("Number of Laid Off Employees by Age Generation and Gender") +
theme(plot.title = element_text(hjust = 0.5))
}
Q2_3()
#---- Load packages ----
library(gridExtra)          # grid.arrange()
library(plotrix)            # legend
library(tidyverse)          # included library readr, dplyr, ggplot2, stringr, forcats, lubridate, magrittr
# Import data by reading csv file
setwd("C:/Users/bbkx2/Downloads/project/R/PFDA_Assignment")
data <- read.csv('employee_attrition.csv', header = TRUE, sep = ",")
# Data Exploration
# This function takes in the data and displays the number of columns and rows in the data,
# the number of missing values in the data, the data structure, and the summary of the data
# @param data: The data to be explored
explore_data <- function() {
# Check number of rows & columns
cat("The total no. of columns is", ncol(data),"and the total no. of rows is", nrow(data),"\n")
# Check number of missing values
cat("The number of missing values in data:", sum(is.na(data)), "\n\n")
# Check data structure
cat(str(data), "\n")
# Check summary of the data
print(summary(data))
}
# Data Cleaning
# This code is used to clean the data by removing duplicates, replacing missing values,
# removing unnecessary columns, renaming columns, and returning the cleaned data.
# @param data: The data to be cleaned
clean_data <- function(data) {
# Check for duplicates
sum(duplicated(data))
# If there's any, remove the duplicates
unique(data)
# Replace missing values with NA, if any
data[data == ""] <- NA
# Remove unnecessary column
data <- select(data, -c("gender_short", "recorddate_key", "orighiredate_key",
"store_name", "BUSINESS_UNIT"))
# Renaming column names
colnames(data) <- c("employee_ID", "birth_date", "termination_date", "age", "service_count", "city_name",
"department_name", "job_title", "gender", "termination_reason",
"termination_type", "status_year", "status")
return(data)
}
# Data Pre-processing
# This function pre-processes the input data by cleaning and transforming it.
# Finally, it returns the pre-processed data.
# @param data: The data to be processed
preprocess_data <- function(data) {
# Replace default termination date (still working) to "NA"
data$termination_date = ifelse(data$termination_date == "1/1/1900", NA, data$termination_date)
# Converted to POSIXct (a date/time data type in R) using the specified date format strings
data$birth_date <- as.POSIXct(data$birth_date, format = "%m/%d/%Y")
data$termination_date <- as.POSIXct(data$termination_date, format = "%m/%d/%Y")
# Replace typo "resignaton" to "resignation"
data$termination_reason <- str_replace(data$termination_reason, "Resignaton", "Resignation")
# Splits the job title string (e.g <Director, Any> to <Director> only) by the comma character
# and returns the first element of the resulting string vector
data$job_title <- sapply(data$job_title, function(f) {strsplit(f, ",")[[1]]}[1])
# Converted job title to character format
data$job_title <- as.character(data$job_title)
# Converted character type data into factor
data <- data %>%
mutate(
city_name = as.factor(city_name),
department_name = as.factor(department_name),
job_title = as.factor(job_title),
gender = as.factor(gender),
termination_reason = as.factor(termination_reason),
termination_type = as.factor(termination_type),
status = as.factor(status),
)
# Extract the year from the birth date
data$birth_year <- year(ymd(data$birth_date))
# This code creates a new variable generation based on the birth_year variable
# The generation variable categorizes the different birth years into five different groups
# The first group is the Silent Generation, the second group is the Baby Boomers,
# the third group is Gen X, the fourth group is the Millennial and the fifth group is Gen Z
data$generation <- ifelse(data$birth_year >= 1997, "Gen Z",
ifelse(data$birth_year >= 1981, "Millennials",
ifelse(data$birth_year >= 1965, "Gen X",
ifelse(data$birth_year >= 1946, "Baby Boomers", "The Silent Generation"))))
return(data)
}
# Explore, Clean, and Pre-process the data all at once
# The data is first explored and then cleaned and pre-processed.
explore_data()
data <- data %>%
clean_data() %>%
preprocess_data()
# View the processed data in table format
View(data)
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heat map
ggplot(data_sub_agg, aes(x = department_name, y = "")) +
geom_tile(aes(fill = count), color = "white", size = 1.5) +
scale_fill_gradient(low = "#FFFF00", high = "#FF0000") +
# element_blank() removes the text labels
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 5), "cm"),
plot.title = element_text(hjust = 0.5), # centers the plot title horizontally
panel.background = element_rect(color = "black", size = 1, fill = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Count of Layoffs by Department") +
labs(x = "Department", y = "")
}
Q2_1()
#---- 1st Idea - Trends in employee termination within 10 years ----
first_idea <- function() {
# create a new column for termination year
data$termination_year <- format(data$termination_date, "%Y")
# group the data by termination year and termination reason
termination_by_year_reason <- data %>%
filter(status == "TERMINATED") %>% # Filter to only terminated employees
group_by(termination_year, termination_reason) %>% # Group by termination year and termination reason
summarize(count = n(), .groups = 'drop') # Summarize number of employees
# create a stacked bar chart
# specifies the data and the variables to be used for the x and y axes and for color
ggplot(termination_by_year_reason, aes(x = termination_year, y = count, fill = termination_reason)) +
geom_bar(stat = "identity") + # `stat = "identity"` argument tells ggplot to use the actual values in "count"
scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a")) + # specify color for each termination reason
labs(title = "Employee Termination by Year and Reason", # title for the plot
x = "Year of Termination", # label for the x axis
y = "Number of Terminations", # label for the y axis
fill = "Termination Reason") + # label for the legend
theme_bw() + # set theme to black and white
theme(plot.title = element_text(hjust = 0.5), # center the title
axis.text.x = element_text(vjust = 0.5)) # move the x axis labels closer to the axis
}
first_idea()
#---- 2nd Idea - Analysis of employee termination by gender within ten years ----
second_idea <- function() {
# Create a new column for the year of termination
data$termination_year <- as.integer(substr(data$termination_date, 1, 4))
# Filter to use only the terminated employees' data
data <- data %>%
filter(status == "TERMINATED")
# Create the bar chart
# factor function is used to ensure that the X-axis shows all years
# even if there is no data for a particular year
ggplot(data, aes(x = termination_year, group = gender, fill = gender)) +
# dodge the bars so that they do not overlap
geom_bar(position = "dodge", color = "black", stat = "count") +
# Sets the breaks on the x-axis
scale_x_continuous(breaks = seq(min(data$termination_year),
max(data$termination_year), 1)) +
labs(title = "Number of Terminated Employees by Gender and Year",
x = "Year of Termination",
y = "Count of Employees",
fill = "Gender") +
theme_minimal()
}
second_idea()
third_idea <- function() {
# Count number of employees in each generation
generation_count <- data %>%
group_by(status_year, generation) %>%
summarize(count = n(), .groups = 'drop') %>%
filter(!is.na(generation)) %>%
ungroup()
# After grouping the data and summarizing it,
#remove the grouping structure of the data frame
# Plot number of employees in each age group by year using line graph
ggplot(generation_count, aes(x = status_year, y = count, color = generation)) +
geom_line(size = 0.75, linejoin = "mitre", lineend = "butt") +
labs(x = "Year",
y = "Number of Employees",
title = "Number of Employees by Age Generation Over Time") +
# Sets the qualitative color palette for the different generations.
scale_color_brewer(type = "qual",
palette = "Dark2") +
# Sets the breaks on the x-axis
scale_x_continuous(breaks = seq(min(generation_count$status_year),
max(generation_count$status_year), 1)) +
theme_minimal()
}
third_idea()
