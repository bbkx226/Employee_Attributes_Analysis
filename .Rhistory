}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name: ")
id = as.integer(readline(prompt = "Your ID: "))
mark1 = as.integer(readline(prompt = "Your mark1: "))
mark2 = as.integer(readline(prompt = "Your mark2: "))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
take(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
view(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
sample_data
View(sample_data)
#---- Load packages ----
library(gridExtra)          # grid.arrange()
library(plotrix)            # legend
library(tidyverse)          # included library readr, dplyr, ggplot2, stringr, forcats, lubridate, magrittr
# Import data by reading csv file
setwd("C:/Users/bbkx2/Downloads/project/R/PFDA_Assignment")
data <- read.csv('employee_attrition.csv', header = TRUE, sep = ",")
# Data Exploration
# This function takes in the data and displays the number of columns and rows in the data,
# the number of missing values in the data, the data structure, and the summary of the data
# @param data: The data to be explored
explore_data <- function() {
# Check number of rows & columns
cat("The total no. of columns is", ncol(data),"and the total no. of rows is", nrow(data),"\n")
# Check number of missing values
cat("The number of missing values in data:", sum(is.na(data)), "\n\n")
# Check data structure
cat(str(data), "\n")
# Check summary of the data
print(summary(data))
}
# Data Cleaning
# This code is used to clean the data by removing duplicates, replacing missing values,
# removing unnecessary columns, renaming columns, and returning the cleaned data.
# @param data: The data to be cleaned
clean_data <- function(data) {
# Check for duplicates
sum(duplicated(data))
# If there's any, remove the duplicates
unique(data)
# Replace missing values with NA, if any
data[data == ""] <- NA
# Remove unnecessary column
data <- select(data, -c("gender_short", "recorddate_key", "orighiredate_key"))
# Renaming column names
colnames(data) <- c("employee_ID", "birth_date", "termination_date", "age", "service_count", "city_name",
"department_name", "job_title", "store_name", "gender", "termination_reason",
"termination_type", "status_year", "status", "business_unit")
return(data)
}
# Data Pre-processing
# This function pre-processes the input data by cleaning and transforming it.
# Finally, it returns the pre-processed data.
# @param data: The data to be processed
preprocess_data <- function(data) {
# Replace default termination date (still working) to "NA"
data$termination_date = ifelse(data$termination_date == "1/1/1900", NA, data$termination_date)
# Converted to POSIXct (a date/time data type in R) using the specified date format strings
data$birth_date <- as.POSIXct(data$birth_date, format = "%m/%d/%Y")
data$termination_date <- as.POSIXct(data$termination_date, format = "%m/%d/%Y")
# Replace typo "resignaton" to "resignation"
data$termination_reason <- str_replace(data$termination_reason, "Resignaton", "Resignation")
# Splits the job title string (e.g <Director, Any> to <Director> only) by the comma character
# and returns the first element of the resulting string vector
data$job_title <- sapply(data$job_title, function(f) {strsplit(f, ",")[[1]]}[1])
# Converted job title to character format
data$job_title <- as.character(data$job_title)
# Converted character type data into factor
data <- data %>%
mutate(
city_name = as.factor(city_name),
department_name = as.factor(department_name),
job_title = as.factor(job_title),
store_name = as.factor(store_name),
gender = as.factor(gender),
termination_reason = as.factor(termination_reason),
termination_type = as.factor(termination_type),
status = as.factor(status),
business_unit = as.factor(business_unit),
)
# Extract the year from the birth date
data$birth_year <- year(ymd(data$birth_date))
# This code creates a new variable generation based on the birth_year variable
# The generation variable categorizes the different birth years into five different groups
# The first group is the Silent Generation, the second group is the Baby Boomers,
# the third group is Gen X, the fourth group is the Millennial and the fifth group is Gen Z
data$generation <- ifelse(data$birth_year >= 1997, "Gen Z",
ifelse(data$birth_year >= 1981, "Millennials",
ifelse(data$birth_year >= 1965, "Gen X",
ifelse(data$birth_year >= 1946, "Baby Boomers", "The Silent Generation"))))
return(data)
}
# Explore, Clean, and Pre-process the data all at once
# The data is first explored and then cleaned and pre-processed.
explore_data()
data <- data %>%
clean_data() %>%
preprocess_data()
# View the processed data in table format
View(data)
#+============================================================================+
#| Data Exploration for Ideas of questions to ask                             |
#+============================================================================+
first_idea <- function() {
# create a new column for termination year
data$termination_year <- format(data$termination_date, "%Y")
# group the data by termination year and termination reason
termination_by_year_reason <- data %>%
filter(status == "TERMINATED") %>% # Filter to only terminated employees
group_by(termination_year, termination_reason) %>% # Group by termination year and termination reason
summarize(count = n(), .groups = 'drop') # Summarize number of employees
# create a stacked bar chart
# specifies the data and the variables to be used for the x and y axes and for color
ggplot(termination_by_year_reason, aes(x = termination_year, y = count, fill = termination_reason)) +
geom_bar(stat = "identity") + # `stat = "identity"` argument tells ggplot to use the actual values in "count"
scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a")) + # specify color for each termination reason
labs(title = "Employee Termination by Year and Reason", # title for the plot
x = "Year of Termination", # label for the x axis
y = "Number of Terminations", # label for the y axis
fill = "Termination Reason") + # label for the legend
theme_bw() + # set theme to black and white
theme(plot.title = element_text(hjust = 0.5), # center the title
axis.text.x = element_text(vjust = 0.5)) # move the x axis labels closer to the axis
}
first_idea()
first_idea <- function() {
# create a new column for termination year
data$termination_year <- format(data$termination_date, "%Y")
# group the data by termination year and termination reason
termination_by_year_reason <- data %>%
filter(status == "TERMINATED") %>% # Filter to only terminated employees
group_by(termination_year, termination_reason) %>% # Group by termination year and termination reason
summarize(count = n(), .groups = 'drop') # Summarize number of employees
# create a stacked bar chart
# specifies the data and the variables to be used for the x and y axes and for color
ggplot(termination_by_year_reason, aes(x = termination_year, y = count, fill = termination_reason)) +
geom_bar(stat = "identity") + # `stat = "identity"` argument tells ggplot to use the actual values in "count"
scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a")) + # specify color for each termination reason
labs(title = "Employee Termination by Year and Reason", # title for the plot
x = "Year of Termination", # label for the x axis
y = "Number of Terminations", # label for the y axis
fill = "Termination Reason") + # label for the legend
theme(plot.title = element_text(hjust = 0.5), # center the title
axis.text.x = element_text(vjust = 0.5)) # move the x axis labels closer to the axis
}
first_idea()
first_idea <- function() {
# create a new column for termination year
data$termination_year <- format(data$termination_date, "%Y")
# group the data by termination year and termination reason
termination_by_year_reason <- data %>%
filter(status == "TERMINATED") %>% # Filter to only terminated employees
group_by(termination_year, termination_reason) %>% # Group by termination year and termination reason
summarize(count = n(), .groups = 'drop') # Summarize number of employees
# create a stacked bar chart
# specifies the data and the variables to be used for the x and y axes and for color
ggplot(termination_by_year_reason, aes(x = termination_year, y = count, fill = termination_reason)) +
geom_bar(stat = "identity") + # `stat = "identity"` argument tells ggplot to use the actual values in "count"
scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a")) + # specify color for each termination reason
labs(title = "Employee Termination by Year and Reason", # title for the plot
x = "Year of Termination", # label for the x axis
y = "Number of Terminations", # label for the y axis
fill = "Termination Reason") + # label for the legend
theme_bw() + # set theme to black and white
theme(plot.title = element_text(hjust = 0.5), # center the title
axis.text.x = element_text(vjust = 0.5)) # move the x axis labels closer to the axis
}
first_idea()
third_idea <- function() {
# Count number of employees in each generation
generation_count <- data %>%
group_by(status_year, generation) %>%
summarize(count = n(), .groups = 'drop') %>%
filter(!is.na(generation)) %>%
ungroup()
# After grouping the data and summarizing it,
#remove the grouping structure of the data frame
# Plot number of employees in each age group by year using line graph
ggplot(generation_count, aes(x = status_year, y = count, color = generation)) +
geom_line(size = 0.75, linejoin = "mitre", lineend = "butt") +
labs(x = "Year",
y = "Number of Employees",
title = "Number of Employees by Age Generation Over Time") +
# Sets the qualitative color palette for the different generations.
scale_color_brewer(type = "qual",
palette = "Dark2") +
# Sets the breaks on the x-axis
scale_x_continuous(breaks = seq(min(generation_count$status_year),
max(generation_count$status_year), 1)) +
theme_minimal()
}
third_idea()
third_idea <- function() {
# Count number of employees in each generation
generation_count <- data %>%
group_by(status_year, generation) %>%
summarize(count = n(), .groups = 'drop') %>%
filter(!is.na(generation)) %>%
ungroup()
# After grouping the data and summarizing it,
#remove the grouping structure of the data frame
# Plot number of employees in each age group by year using line graph
ggplot(generation_count, aes(x = status_year, y = count, color = generation)) +
geom_line(linewidth = 0.75, linejoin = "mitre", lineend = "butt") +
labs(x = "Year",
y = "Number of Employees",
title = "Number of Employees by Age Generation Over Time") +
# Sets the qualitative color palette for the different generations.
scale_color_brewer(type = "qual",
palette = "Dark2") +
# Sets the breaks on the x-axis
scale_x_continuous(breaks = seq(min(generation_count$status_year),
max(generation_count$status_year), 1)) +
theme_minimal()
}
third_idea()
#---- Analysis 5.2 - Find the relationship between average length of service and departments ----
Q5_2 <- function() {
# Group the data by department and calculate the average length of service
avg_service_dept <- aggregate(data$service, by=list(data$department_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("department_name", "avg_service_length")
# Reorder the departments by average service length
avg_service_dept <- avg_service_dept %>%
mutate(department_name = fct_reorder(department_name, avg_service_length, .desc = FALSE))
# Set theme options
my_theme <- theme_minimal() +
theme(plot.background = element_rect(fill = "#f2f2f2"),
panel.background = element_rect(fill = "#f2f2f2"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2"),
panel.grid.major = element_line(color = "white", linewidth = 0.25),
panel.grid.minor = element_blank())
# Plot the scatter plot with line of best fit
ggplot(avg_service_dept, aes(x = department_name, y = avg_service_length)) +
geom_point(size = 3, color = "navy") +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "black") +
ggtitle("Average Length of Service by Department") +
labs(x = "Department",
y = "Average Length of Service") +
scale_y_continuous(limits = c(5, 25), breaks = seq(5, 25, by = 1)) +
scale_color_manual(values = "navy", name = "") +
my_theme
}
Q5_2()
Q4_6 <- function() {
data$termination_year <- format(data$termination_date, "%Y")
# Create a variable to identify the time period (after 2013 or previous years)
data$termination_period <- ifelse(data$termination_year > 2013, "After 2013", "Previous Years")
# Filter data for terminated employees
terminated_employees <- data %>%
filter(status == "TERMINATED")
# Create a density plot for age distribution
ggplot(terminated_employees, aes(x = age, fill = termination_period)) +
geom_density(alpha = 0.5) +
labs(x = "Age", y = "Density", title = "Age Distribution of Terminated Employees") +
scale_fill_manual(values = c("darkblue", "darkred"), labels = c("After 2013", "Previous Years")) +
theme_minimal()
}
Q4_6()
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heat map
ggplot(data_sub_agg, aes(x = department_name, y = "")) +
geom_tile(aes(fill = count), color = "white", size = 1.5) +
scale_fill_gradient(low = "#FFFF00", high = "#FF0000") +
# element_blank() removes the text labels
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 5), "cm"),
plot.title = element_text(hjust = 0.5), # centers the plot title horizontally
panel.background = element_rect(color = "black", size = 1, fill = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Count of Layoffs by Department") +
labs(x = "Department", y = "")
}
Q2_1()
#---- Analysis 2.1 - Analyze the relationship between departments and layoff ----
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heat map
ggplot(data_sub_agg, aes(x = department_name, y = "")) +
geom_tile(aes(fill = count), color = "white", size = 1.5) +
scale_fill_gradient(low = "#FFFF00", high = "#FF0000") +
# element_blank() removes the text labels
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 5), "cm"),
plot.title = element_text(hjust = 0.5), # centers the plot title horizontally
panel.background = element_rect(color = "black", linewidth = 1, fill = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Count of Layoffs by Department") +
labs(x = "Department", y = "")
}
Q2_1()
Q4_3 <- function() {
# Filter data for employees who left after 2013
terminated_after_2013 <- data %>%
filter(termination_date > as.Date("2013-01-01"), status == "TERMINATED")
# Count the frequency of each termination reason
termination_reason_counts <- terminated_after_2013 %>%
count(termination_reason)
# Sort termination reasons by frequency in descending order
termination_reason_counts <- termination_reason_counts %>%
arrange(desc(n))
# Create a lollipop plot
ggplot(termination_reason_counts, aes(x = termination_reason, y = n)) +
geom_segment(aes(xend = termination_reason, yend = 0), color = "darkblue", size = 1.5) +
geom_point(size = 3, color = "darkblue") +
labs(x = "Termination Reason", y = "Frequency", title = "Distribution of Termination Reasons\n(For Employees Who Left After 2013)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
}
Q4_3()
Q6_1 <- function() {
# Filter data for terminated employees
terminated_employees <- data %>%
filter(status == "TERMINATED")
# Calculate termination rate and count by city and store location
termination_data <- terminated_employees %>%
group_by(city_name, store_name) %>%
summarize(termination_rate = n() / nrow(data),
termination_count = n(), .groups = 'drop')
# Create bubble plot
ggplot(termination_data, aes(x = city_name, y = store_name, size = termination_count, fill = termination_rate)) +
geom_point(shape = 21, color = "black") +
scale_size_continuous(range = c(2, 10)) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "City", y = "Store Name", title = "Termination Rate in Different Cities and Store Locations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q6_1()
#---- Analysis 3.6 - Investigate if there is a correlation between gender and the length of service for terminated employees in 2014 ----
Q3_6 = function() {
# Filter the terminated employees data for the year 2014
terminated_2014 <- filter(data, year(termination_date) == 2014)
# Create the violin plot
ggplot(terminated_2014, aes(x = gender, y = service_count, fill = gender)) +
geom_violin() +
labs(x = "Gender", y = "Length of Service",
title = "Correlation between Gender and Length of Service for Terminated Employees in 2014") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
legend.position = "none")
}
Q3_6()
