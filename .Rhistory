plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name:")
id = as.integer(readline(prompt = "Your ID:"))
mark1 = as.integer(readline(prompt = "Your mark1:"))
mark2 = as.integer(readline(prompt = "Your mark2:"))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,[Total Marks]=total,Average=avg))
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name:")
id = as.integer(readline(prompt = "Your ID:"))
mark1 = as.integer(readline(prompt = "Your mark1:"))
mark2 = as.integer(readline(prompt = "Your mark2:"))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name:")
id = as.integer(readline(prompt = "Your ID:"))
mark1 = as.integer(readline(prompt = "Your mark1:"))
mark2 = as.integer(readline(prompt = "Your mark2:"))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details()
clear
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name: ")
id = as.integer(readline(prompt = "Your ID: "))
mark1 = as.integer(readline(prompt = "Your mark1: "))
mark2 = as.integer(readline(prompt = "Your mark2: "))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details()
# FUNCTIONS
#   func_name <- function (arguments)
#   {
#      // statements
#      //return(value)
#   }
# Create function called "display" and print "welcome"
display <- function(){
print("Welcome")
}
display()
# Create a function for sum of two numbers by passing through parameters
plus<-function(x, y){
z = x + y
return (z)
}
plus(34, 56)
#2 Assigning Directly
plus<-function()
{
x = 34
y <- 56
z = x + y
return(z)
}
plus()
#3 Getting values from user
plus<-function(){
x = as.integer(readline(prompt = "Enter the number:"))
y = as.integer(readline(prompt = "Enter the number:"))
z = x + y
return(z)
}
plus()
calculator <- function(x,y)
{
add = x + y
sub = x - y
mul = x * y
div = x / y
return(c(Addition=add,subtraction=sub,Multiply=mul,Division=div))
}
calculator(20,20)
# Practice Problem
# Create a function called getdetails() and accept name,id,Mark1,Mark2 of one student
# and print all these data along with Total marks and Average.
details <- function(){
name = readline(prompt = "Your name: ")
id = as.integer(readline(prompt = "Your ID: "))
mark1 = as.integer(readline(prompt = "Your mark1: "))
mark2 = as.integer(readline(prompt = "Your mark2: "))
total = mark1 + mark2
avg = total / 2
return(c(Name=name,ID=id,Mark1=mark1,Mark2=mark2,"Total Marks"=total,Average=avg))
}
details
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
take(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
view(sample_data)
# Data Exploration
# Import data
# Cleaning data
# Pre-processing
# Data exploration
# Data visualization
# Data manipulation
# Read file
sample_data = read.csv("C:\\Users\\bbkx2\\Downloads\\IRIS.csv",header=FALSE)
sample_data
# Reassigning Headers
names(sample_data) = c("SEPAL_LENGTH","SEPEL_WIDTH","PETAL_LENGTH","PETAL_WIDTH","SPECIES")
sample_data
head(sample_data)
head(sample_data, 10)
tail(sample_data, 10)
# View all data
sample_data
View(sample_data)
#---- Load packages ----
library(gridExtra)          # grid.arrange()
library(plotrix)            # legend
library(tidyverse)          # included library readr, dplyr, ggplot2, stringr, forcats, lubridate, magrittr
# Import data by reading csv file
setwd("C:/Users/bbkx2/Downloads/project/R/PFDA_Assignment")
data <- read.csv('employee_attrition.csv', header = TRUE, sep = ",")
# Data Exploration
# This function takes in the data and displays the number of columns and rows in the data,
# the number of missing values in the data, the data structure, and the summary of the data
# @param data: The data to be explored
explore_data <- function() {
# Check number of rows & columns
cat("The total no. of columns is", ncol(data),"and the total no. of rows is", nrow(data),"\n")
# Check number of missing values
cat("The number of missing values in data:", sum(is.na(data)), "\n\n")
# Check data structure
cat(str(data), "\n")
# Check summary of the data
print(summary(data))
}
# Data Cleaning
# This code is used to clean the data by removing duplicates, replacing missing values,
# removing unnecessary columns, renaming columns, and returning the cleaned data.
# @param data: The data to be cleaned
clean_data <- function(data) {
# Check for duplicates
sum(duplicated(data))
# If there's any, remove the duplicates
unique(data)
# Replace missing values with NA, if any
data[data == ""] <- NA
# Remove unnecessary column
data <- select(data, -c("gender_short", "recorddate_key", "orighiredate_key"))
# Renaming column names
colnames(data) <- c("employee_ID", "birth_date", "termination_date", "age", "service_count", "city_name",
"department_name", "job_title", "store_name", "gender", "termination_reason",
"termination_type", "status_year", "status", "business_unit")
return(data)
}
# Data Pre-processing
# This function pre-processes the input data by cleaning and transforming it.
# Finally, it returns the pre-processed data.
# @param data: The data to be processed
preprocess_data <- function(data) {
# Replace default termination date (still working) to "NA"
data$termination_date = ifelse(data$termination_date == "1/1/1900", NA, data$termination_date)
# Converted to POSIXct (a date/time data type in R) using the specified date format strings
data$birth_date <- as.POSIXct(data$birth_date, format = "%m/%d/%Y")
data$termination_date <- as.POSIXct(data$termination_date, format = "%m/%d/%Y")
# Replace typo "resignaton" to "resignation"
data$termination_reason <- str_replace(data$termination_reason, "Resignaton", "Resignation")
# Splits the job title string (e.g <Director, Any> to <Director> only) by the comma character
# and returns the first element of the resulting string vector
data$job_title <- sapply(data$job_title, function(f) {strsplit(f, ",")[[1]]}[1])
# Converted job title to character format
data$job_title <- as.character(data$job_title)
# Converted character type data into factor
data <- data %>%
mutate(
city_name = as.factor(city_name),
department_name = as.factor(department_name),
job_title = as.factor(job_title),
store_name = as.factor(store_name),
gender = as.factor(gender),
termination_reason = as.factor(termination_reason),
termination_type = as.factor(termination_type),
status = as.factor(status),
business_unit = as.factor(business_unit),
)
# Extract the year from the birth date
data$birth_year <- year(ymd(data$birth_date))
# This code creates a new variable generation based on the birth_year variable
# The generation variable categorizes the different birth years into five different groups
# The first group is the Silent Generation, the second group is the Baby Boomers,
# the third group is Gen X, the fourth group is the Millennial and the fifth group is Gen Z
data$generation <- ifelse(data$birth_year >= 1997, "Gen Z",
ifelse(data$birth_year >= 1981, "Millennials",
ifelse(data$birth_year >= 1965, "Gen X",
ifelse(data$birth_year >= 1946, "Baby Boomers", "The Silent Generation"))))
return(data)
}
# Explore, Clean, and Pre-process the data all at once
# The data is first explored and then cleaned and pre-processed.
explore_data()
data <- data %>%
clean_data() %>%
preprocess_data()
# View the processed data in table format
View(data)
#+============================================================================+
#| Data Exploration for Ideas of questions to ask                             |
#+============================================================================+
