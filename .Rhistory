geom_bar(stat="summary", fun = "mean", fill="maroon") +
ggtitle("Average Length of Service by Department") +
labs(x = "City",
y = "Average Length of Service") +
coord_cartesian(ylim = c(6, 15)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q5_3()
# Explanation:
# Based on the graph, it can be observed that "Ocean Falls" is the city with the longest average length of service.
# this may be that the company in this city may have a strong presence and good reputation in the community,
# leading to higher job satisfaction and loyalty among employees.
Q5_3 <- function() {
# Group the data by city and calculate the average length of service
avg_service_dept <- aggregate(data$service_count, by=list(data$city_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("service_count", "city_name")
# Reorder the departments by average service length in descending order
avg_service_dept <- avg_service_dept %>%
mutate(service_count = fct_reorder(service_count, city_name, .desc = TRUE))
# Plot the bar graph
ggplot(avg_service_dept, aes(x = service_count, y = city_name)) +
geom_bar(stat="summary", fun = "mean", fill="maroon") +
ggtitle("Average Length of Service by Department") +
labs(x = "City",
y = "Average Length of Service") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q5_3()
#---- Analysis 5.3 - Find the relationship between average length of service and cities ----
Q5_3 <- function() {
# Group the data by city and calculate the average length of service
avg_service_dept <- aggregate(data$service_count, by=list(data$city_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("service_count", "city_name")
# Reorder the departments by average service length in descending order
avg_service_dept <- avg_service_dept %>%
mutate(service_count = fct_reorder(service_count, city_name, .desc = TRUE))
# Plot the bar graph
ggplot(avg_service_dept, aes(x = service_count, y = city_name)) +
geom_bar(stat="summary", fun = "mean", fill="maroon") +
ggtitle("Average Length of Service by Department") +
labs(x = "City",
y = "Average Length of Service") +
coord_cartesian(ylim = c(6, 15)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q5_3()
Q5_3 <- function() {
# Group the data by city and calculate the average length of service
avg_service_dept <- aggregate(data$service_count, by=list(data$city_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("service_count", "city_name")
# Reorder the departments by average service length in descending order
avg_service_dept <- avg_service_dept %>%
mutate(service_count = fct_reorder(service_count, city_name, .desc = TRUE))
# Plot the bar graph
ggplot(avg_service_dept, aes(x = service_count, y = city_name)) +
geom_bar(stat="summary", fun = "mean", fill="maroon") +
ggtitle("Average Length of Service by Department") +
labs(x = "City",
y = "Average Length of Service") +
coord_cartesian(ylim = c(7, 15)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q5_3()
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Order the job titles by the count of layoffs in descending order
job_layoff_count <- job_layoff_count %>%
mutate(job_title = fct_reorder(job_title, count, .desc = TRUE))
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
}
Q2_2()
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Order the job titles by the count of layoffs in descending order
job_layoff_count <- job_layoff_count %>%
mutate(job_title = fct_reorder(job_title, count, .desc = TRUE))
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
}
Q2_2()
Q3_2 <- function() {
# Filter out the year of termination date
data$termination_year <- year(ymd(data$termination_date))
data_filtered <- data %>%
filter(age >= 60, termination_year %in% c(2014)) %>%
group_by(gender, job_title, status) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(job_title = fct_reorder(job_title, count, .desc = FALSE))
ggplot(data_filtered, aes(x = job_title, y = count, fill = status)) +
geom_bar(stat = "identity", position = "stack", color = "black", size = 0.4) +
labs(x = "Job Title",
y = "Count of Terminated Employees",
fill = "Status") +
facet_wrap(~ gender) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q3_2()
#---- Analysis 2.2 - Analyze the relationship between employees' job and layoff ----
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Order the job titles by the count of layoffs in descending order
job_layoff_count <- job_layoff_count %>%
mutate(job_title = fct_reorder(job_title, count, .desc = TRUE))
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
}
Q2_2()
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
}
Q2_2()
#---- Analysis 2.2 - Analyze the relationship between employees' job and layoff ----
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Order the job titles by the count of layoffs in descending order
job_layoff_count <- job_layoff_count %>%
mutate(job_title = fct_reorder(job_title, count, .desc = TRUE))
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
}
Q2_2()
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
}
Q2_2()
Q2_2 = function() {
# Subset the data to only include employees terminated due to layoff
layoff_data <- subset(data, termination_reason == "Layoff")
# Group the data by job_title and termination_reason, and `aggregate()` count the number of employee layoffs by job title and termination reason.
# `FUN` specifies the function to be used to collapse the data
# `length` function is being used to count the number of employee IDs for each combination of job title and termination reason.
job_layoff_count <- aggregate(layoff_data$employee_ID, by = list(layoff_data$job_title, layoff_data$termination_reason), FUN=length)
# Create each column's name
names(job_layoff_count) <- c("job_title", "termination_reason", "count")
# Create a stacked bar plot
ggplot(job_layoff_count, aes(job_title, y=count, fill = termination_reason)) +
geom_bar(stat = "identity") +
labs(x = "Job Title",
y = "Count",
fill = "Termination Reason") +
ggtitle("Relationship between Job Title and Layoff") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
}
Q2_2()
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heat map
ggplot(data_sub_agg, aes(x = department_name, y = "")) +
geom_tile(aes(fill = count), color = "white", size = 1.5) +
scale_fill_gradient(low = "#FFFF00", high = "#FF0000") +
# element_blank() removes the text labels
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 5), "cm"),
plot.title = element_text(hjust = 0.5), # centers the plot title horizontally
panel.background = element_rect(color = "black", size = 1, fill = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Count of Layoffs by Department") +
labs(x = "Department", y = "")
}
Q2_1()
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heatmap
heatmap(table, Rowv=NA, Colv=NA,
col = rev(heat.colors(256)),
scale = "column",
margins = c(5,10),
main = "Count of Layoffs by Department",
xlab = "Department", ylab = "")
}
Q2_1()
Q3_3 <- function() {
# Filter out the year of termination date
data$termination_year <- year(ymd(data$termination_date))
# Filter the data that only applicable for those who terminated in 2014
data_filtered <- data %>%
filter(status == "TERMINATED", termination_year %in% c(2014))
# Counting terminated employees by gender and city
terminated_by_city <- data_filtered %>%
group_by(gender, city_name) %>%
summarize(count = n(), .groups = "drop") %>%
mutate(city_name = fct_reorder(city_name, count, .desc = TRUE))
# Plotting the graph
ggplot(terminated_by_city, aes(x = city_name, y = count, fill = gender)) +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(0.75), binwidth=1) +
labs(x = "City",
y = "Count of Terminated Employees") +
scale_fill_manual(values=c("red", "blue")) +
ggtitle("Distribution of Terminated Employees by City and Gender") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
Q3_3()
Q3_4 <- function() {
# Filter out the year of termination date
data$termination_year <- year(ymd(data$termination_date))
# Filter data for Vancouver & Fort Nelson and group by gender and job title
data_filtered_vancouver <- data %>%
filter(city_name == "Vancouver", gender == "Female", termination_year %in% c(2014)) %>%
group_by(gender, job_title) %>%
summarize(count = n(), .groups = "drop")
data_filtered_fort_nelson <- data %>%
filter(city_name == "Fort Nelson", gender == "Female", termination_year %in% c(2014)) %>%
group_by(gender, job_title) %>%
summarize(count = n(), .groups = "drop")
# Order job titles by descending count
data_filtered_vancouver <- data_filtered_vancouver %>%
mutate(job_title = fct_reorder(job_title, count, .desc = FALSE))
data_filtered_fort_nelson <- data_filtered_fort_nelson %>%
mutate(job_title = fct_reorder(job_title, count, .desc = FALSE))
# Plot stacked bar chart
vancouver_bar_plot <- ggplot(data_filtered_vancouver, aes(x = job_title, y = count, fill = gender)) +
geom_bar(stat = "identity") +
labs(x = "Jobs in Vancouver city",
y = "Number of Terminated Employees in year 2014",
fill = "Gender") +
# Flip the coordinates of x & y
coord_flip() +
theme(legend.position = "bottom")
fort_nelson_bar_plot <- ggplot(data_filtered_fort_nelson, aes(x = job_title, y = count, fill = gender)) +
geom_bar(stat = "identity") +
labs(x = "Jobs in Fort Nelson city",
y = "Number of Terminated Employees in year 2014",
fill = "Gender") +
# Flip the coordinates of x & y
coord_flip() +
theme(legend.position = "bottom")
grid.arrange(vancouver_bar_plot, fort_nelson_bar_plot, ncol = 2)
}
Q3_4()
Q5_2 <- function() {
# Group the data by department and calculate the average length of service
avg_service_dept <- aggregate(data$service, by=list(data$department_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("department_name", "avg_service_length")
# Reorder the departments by average service length
avg_service_dept <- avg_service_dept %>%
mutate(department_name = fct_reorder(department_name, avg_service_length, .desc = FALSE))
# Set theme options
my_theme <- theme_minimal() +
theme(plot.background = element_rect(fill = "#f2f2f2"),
panel.background = element_rect(fill = "#f2f2f2"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2"),
panel.grid.major = element_line(color = "white", linewidth = 0.25),
panel.grid.minor = element_blank())
# Plot the scatter plot with line of best fit
ggplot(avg_service_dept, aes(x = department_name, y = avg_service_length)) +
geom_point(size = 3, color = "navy") +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "black") +
ggtitle("Average Length of Service by Department") +
labs(x = "Department",
y = "Average Length of Service") +
scale_y_continuous(limits = c(5, 25), breaks = seq(5, 25, by = 1)) +
scale_color_manual(values = "navy", name = "") +
my_theme
}
Q5_2()
Q5_2 <- function() {
# Group the data by department and calculate the average length of service
avg_service_dept <- aggregate(data$service, by=list(data$department_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("department_name", "avg_service_length")
# Reorder the departments by average service length
avg_service_dept <- avg_service_dept %>%
mutate(department_name = fct_reorder(department_name, avg_service_length, .desc = FALSE))
# Set theme options
my_theme <- theme_minimal() +
theme(plot.background = element_rect(fill = "#f2f2f2"),
panel.background = element_rect(fill = "#f2f2f2"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2"),
panel.grid.major = element_line(color = "white", linewidth = 0.25),
panel.grid.minor = element_blank())
# Plot the scatter plot with line of best fit
ggplot(avg_service_dept, aes(x = department_name, y = avg_service_length)) +
geom_point(size = 3, color = "navy") +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "black") +
ggtitle("Average Length of Service by Department") +
labs(x = "Department",
y = "Average Length of Service") +
scale_color_manual(values = "navy", name = "") +
my_theme
}
Q5_2()
Q5_2 <- function() {
# Group the data by department and calculate the average length of service
avg_service_dept <- aggregate(data$service, by=list(data$department_name), FUN=mean)
# Rename the columns name
names(avg_service_dept) <- c("department_name", "avg_service_length")
# Reorder the departments by average service length
avg_service_dept <- avg_service_dept %>%
mutate(department_name = fct_reorder(department_name, avg_service_length, .desc = FALSE))
# Set theme options
my_theme <- theme_minimal() +
theme(plot.background = element_rect(fill = "#f2f2f2"),
panel.background = element_rect(fill = "#f2f2f2"),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 14),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2"),
panel.grid.major = element_line(color = "white", linewidth = 0.25),
panel.grid.minor = element_blank())
# Plot the scatter plot with line of best fit
ggplot(avg_service_dept, aes(x = department_name, y = avg_service_length)) +
geom_point(size = 3, color = "navy") +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "black") +
ggtitle("Average Length of Service by Department") +
labs(x = "Department",
y = "Average Length of Service") +
scale_y_continuous(limits = c(5, 25), breaks = seq(5, 25, by = 1)) +
scale_color_manual(values = "navy", name = "") +
my_theme
}
Q5_2()
Q1_3 = function() {
# Select only the data for employees who have been terminated and worked as cashier or meat cutter
cashier_terminated = filter(data, status == "TERMINATED", job_title == "Cashier")
meat_cutter_terminated = filter(data, status == "TERMINATED", job_title == "Meat Cutter")
# Group data by length of service and termination reason, and calculate the count of employees
cashier_count = cashier_terminated %>%
group_by(service_count, termination_reason) %>%
summarize(count = n(), .groups = "drop")
meat_cutter_count = meat_cutter_terminated %>%
group_by(service_count, termination_reason) %>%
summarize(count = n(), .groups = "drop")
# Visualize stacked bar chart for terminated employees who worked as cashier
cashier_bar_plot <- ggplot(cashier_count, aes(x = service_count, y = count, fill = termination_reason)) +
# Creates vertical bars to represent the data
geom_col(color = "black") +
labs(title = "Cashier",
x = "Length of Service (Years)",
y = "Terminated Employees (Person)",
fill = "Termination Reason") +
scale_x_continuous(breaks = seq(0, max(cashier_terminated$service_count), by = 1)) +
theme_minimal()
# Visualize stacked bar chart for terminated employees who worked as meat cutter
meat_cutter_bar_plot <- ggplot(meat_cutter_count, aes(x = service_count, y = count, fill = termination_reason)) +
# Creates vertical bars to represent the data
geom_col(color = "black") +
labs(title = "Meat Cutter",
x = "Length of Service (Years)",
y = "Terminated Employees (Person)",
fill = "Termination Reason") +
scale_x_continuous(breaks = seq(0, max(meat_cutter_terminated$service_count), by = 1)) +
theme_minimal()
# Arrange the plots side by side
grid.arrange(cashier_bar_plot, meat_cutter_bar_plot, ncol=2)
}
Q1_3()
Q2_1 = function() {
# Create a subset of data containing only relevant columns
data_sub <- data %>% select(department_name, termination_reason)
# Calculate the count of layoffs in each department
data_sub_agg <- data_sub %>%
filter(termination_reason == "Layoff") %>%
group_by(department_name) %>%
summarize(count = n()) %>%
ungroup()
# Create a table showing the count of layoffs in each department
table <- data_sub_agg %>%
spread(department_name, count, fill = 0)
# Create a heat map
ggplot(data_sub_agg, aes(x = department_name, y = "")) +
geom_tile(aes(fill = count), color = "white", size = 1.5) +
scale_fill_gradient(low = "#FFFF00", high = "#FF0000") +
# element_blank() removes the text labels
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 5), "cm"),
plot.title = element_text(hjust = 0.5), # centers the plot title horizontally
panel.background = element_rect(color = "black", size = 1, fill = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Count of Layoffs by Department") +
labs(x = "Department", y = "")
}
Q2_1()
